using System.Reflection;
using UnityEditor;
using UnityEngine;

public class ReadOnlyAttribute : PropertyAttribute
{ }

[CustomPropertyDrawer(typeof(ReadOnlyAttribute))]
public class ReadOnlyDrawer : PropertyDrawer
{
    public override void OnGUI(Rect position, SerializedProperty property, GUIContent label)
    {
        // ???????? ??????? ??????, ? ???????? ????????? ??????? ????????.
        object target = property.serializedObject.targetObject;

        // ???????? ??? ????, ? ???????? ???????? ??????? ReadOnly.
        string fieldName = property.name;

        // ?????????? reflection ??? ??????? ? ???????? ????.
        FieldInfo fieldInfo = target.GetType().GetField(fieldName, BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic);

        if (fieldInfo != null)
        {
            // ???????? ???????? ????.
            object value = fieldInfo.GetValue(target);

            // ??????????? ???????? ? ?????? ??? ???????????.
            string stringValue = value != null ? value.ToString() : "null";

            // ?????? ???? ?????? ??? ??????.
            EditorGUI.LabelField(position, label, stringValue);
        }
        else
        {
            EditorGUI.LabelField(position, label, "Field not found");
        }
    }
}